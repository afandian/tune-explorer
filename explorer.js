// Generated by CoffeeScript 1.6.2
/*
Folk Tune Finder tune explorer!

Code for drawing keyboards, typesetting staves, plotting melody trees.

Copyright Joe Wass 2011 - 2013
joe@afandian.com
*/


(function() {
  var ACCIDENTAL, CanvasKeyboardDrawer, CanvasManager, Keyboard, MIDDLE_C, Theory, TuneTreeContext, TuneTreeState, constructContext, context, theory,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  ACCIDENTAL = {
    SHARP: 's',
    FLAT: 'f',
    NATURAL: 'n'
  };

  MIDDLE_C = 60;

  Theory = (function() {
    function Theory() {
      this.DIATONIC_DEGREES = {
        0: [
          {
            degree: 0,
            accidental: ACCIDENTAL.NATURAL
          }
        ],
        1: [
          {
            degree: 0,
            accidental: ACCIDENTAL.SHARP
          }, {
            degree: 1,
            accidental: ACCIDENTAL.FLAT
          }
        ],
        2: [
          {
            degree: 1,
            accidental: ACCIDENTAL.NATURAL
          }
        ],
        3: [
          {
            degree: 2,
            accidental: ACCIDENTAL.FLAT
          }, {
            degree: 1,
            accidental: ACCIDENTAL.SHARP
          }
        ],
        4: [
          {
            degree: 2,
            accidental: ACCIDENTAL.NATURAL
          }
        ],
        5: [
          {
            degree: 3,
            accidental: ACCIDENTAL.NATURAL
          }
        ],
        6: [
          {
            degree: 3,
            accidental: ACCIDENTAL.SHARP
          }, {
            degree: 4,
            accidental: ACCIDENTAL.FLAT
          }
        ],
        7: [
          {
            degree: 4,
            accidental: ACCIDENTAL.NATURAL
          }
        ],
        8: [
          {
            degree: 4,
            accidental: ACCIDENTAL.SHARP
          }, {
            degree: 5,
            accidental: ACCIDENTAL.FLAT
          }
        ],
        9: [
          {
            degree: 5,
            accidental: ACCIDENTAL.NATURAL
          }
        ],
        10: [
          {
            degree: 6,
            accidental: ACCIDENTAL.FLAT
          }, {
            degree: 5,
            accidental: ACCIDENTAL.SHARP
          }
        ],
        11: [
          {
            degree: 6,
            accidental: ACCIDENTAL.NATURAL
          }
        ]
      };
      this.DIATONIC_NOTE_NAMES = ["C", "D", "E", "F", "G", "A", "B"];
    }

    Theory.prototype.positionRelativeToPitch = function(givenPitch, relativeTo) {
      var absPitch, degree, diatonicAccidental, diatonicDegree, diatonicRelative, octave, relativeOctave;

      absPitch = givenPitch;
      while (absPitch < relativeTo) {
        absPitch += 12;
      }
      degree = Math.abs((relativeTo - absPitch) % 12);
      diatonicDegree = this.DIATONIC_DEGREES[degree][0].degree;
      diatonicAccidental = this.DIATONIC_DEGREES[degree][0].accidental;
      relativeOctave = Math.floor((givenPitch - relativeTo) / 12);
      diatonicRelative = relativeOctave * 7 + diatonicDegree;
      octave = Math.floor(givenPitch / 12);
      return {
        chromaticDegree: degree,
        chromaticAbsolute: givenPitch,
        diatonicDegree: diatonicDegree,
        diatonicAccidental: diatonicAccidental,
        diatonicRelative: diatonicRelative,
        octave: octave
      };
    };

    Theory.prototype.noteName = function(pitch) {
      var contextualDegree, name;

      contextualDegree = theory.positionRelativeToPitch(pitch, MIDDLE_C);
      name = this.DIATONIC_NOTE_NAMES[contextualDegree.diatonicDegree];
      name = name + (contextualDegree.diatonicAccidental === ACCIDENTAL.SHARP ? "#" : contextualDegree.diatonicAccidental === ACCIDENTAL.FLAT ? "b" : "");
      return name;
    };

    return Theory;

  })();

  theory = new Theory;

  CanvasKeyboardDrawer = (function() {
    function CanvasKeyboardDrawer(keyboard, WHITE_NOTE_WIDTH, height) {
      var contextualDegree;

      this.keyboard = keyboard;
      this.WHITE_NOTE_WIDTH = WHITE_NOTE_WIDTH;
      this.keyOffset = __bind(this.keyOffset, this);
      this.WHITE_NOTE_HEIGHT = height;
      this.BLACK_NOTE_HEIGHT = height * 0.5;
      this.BLACK_NOTE_WIDTH = this.WHITE_NOTE_WIDTH / 2;
      this.MIDDLE_C_MARKER_RADIUS = this.WHITE_NOTE_WIDTH / 4;
      this.BLACK_NOTE_OFFSET_S = this.WHITE_NOTE_WIDTH - this.BLACK_NOTE_WIDTH / 2;
      this.BLACK_NOTE_OFFSET_F = this.WHITE_NOTE_WIDTH - this.BLACK_NOTE_WIDTH / 2;
      this.keyboardOffset = -this.keyOffset(contextualDegree = theory.positionRelativeToPitch(this.keyboard.LOWEST_PITCH, MIDDLE_C));
    }

    CanvasKeyboardDrawer.prototype.setDrawStyle = function(mode) {
      this.mode = mode;
      if (this.mode === 0) {
        this.BLACK_NOTE_HEIGHT = this.WHITE_NOTE_HEIGHT * 0.5;
        this.WHITE_NOTE_FILL_STYLE = "rgba(240, 240, 240, 1)";
        this.WHITE_NOTE_STROKE_STYLE = "rgba(10, 10, 10, 1)";
        this.BLACK_NOTE_FILL_STYLE = "rgba(10, 10, 10, 1)";
        return this.BLACK_NOTE_STROKE_STYLE = "rgba(40, 40, 40, 1)";
      } else {
        this.BLACK_NOTE_HEIGHT = this.WHITE_NOTE_HEIGHT;
        this.WHITE_NOTE_FILL_STYLE = "rgba(240, 240, 240, 1)";
        this.WHITE_NOTE_STROKE_STYLE = "rgba(10, 10, 10, 0.4)";
        this.BLACK_NOTE_FILL_STYLE = "rgba(100, 100, 100, 1)";
        return this.BLACK_NOTE_STROKE_STYLE = "rgba(100, 100, 100, 1)";
      }
    };

    CanvasKeyboardDrawer.prototype.draw = function(graphicsContext, vNumber) {
      var contextualDegree, middleCX, pitch, _i, _j, _ref, _ref1, _ref2, _ref3;

      vNumber |= 0;
      this.graphicsContext = graphicsContext;
      this.graphicsContext.save();
      this.graphicsContext.translate(0, vNumber * this.WHITE_NOTE_HEIGHT);
      this.graphicsContext.fillStyle = this.WHITE_NOTE_FILL_STYLE;
      this.graphicsContext.strokeStyle = this.WHITE_NOTE_STROKE_STYLE;
      this.graphicsContext.lineWidth = 1;
      for (pitch = _i = _ref = this.keyboard.LOWEST_PITCH, _ref1 = this.keyboard.HIGHEST_PITCH; _ref <= _ref1 ? _i <= _ref1 : _i >= _ref1; pitch = _ref <= _ref1 ? ++_i : --_i) {
        contextualDegree = theory.positionRelativeToPitch(pitch, MIDDLE_C);
        if (contextualDegree.diatonicAccidental === ACCIDENTAL.NATURAL) {
          this.drawKey(contextualDegree);
        }
      }
      this.graphicsContext.fillStyle = this.BLACK_NOTE_FILL_STYLE;
      this.graphicsContext.strokeStyle = this.BLACK_NOTE_LINE_STYLE;
      this.graphicsContext.lineWidth = 1;
      for (pitch = _j = _ref2 = this.keyboard.LOWEST_PITCH, _ref3 = this.keyboard.HIGHEST_PITCH; _ref2 <= _ref3 ? _j <= _ref3 : _j >= _ref3; pitch = _ref2 <= _ref3 ? ++_j : --_j) {
        contextualDegree = theory.positionRelativeToPitch(pitch, MIDDLE_C);
        if (contextualDegree.diatonicAccidental !== ACCIDENTAL.NATURAL) {
          this.drawKey(contextualDegree);
        }
      }
      if ((this.keyboard.LOWEST_PITCH <= 60 && 60 <= this.keyboard.HIGHEST_PITCH)) {
        middleCX = this.keyOffset(theory.positionRelativeToPitch(60, MIDDLE_C)) + this.keyboardOffset;
        graphicsContext.fillStyle = "rgba(0,0,0,0.25)";
        graphicsContext.lineWidth = 1;
        graphicsContext.strokeStyle = "rgba(0,0,0,0,0.125)";
        graphicsContext.beginPath();
        graphicsContext.arc(middleCX + this.WHITE_NOTE_WIDTH / 2, this.WHITE_NOTE_HEIGHT * 0.75, this.MIDDLE_C_MARKER_RADIUS, 0, 2 * Math.PI, false);
        graphicsContext.fill();
        graphicsContext.stroke();
      }
      return this.graphicsContext.restore();
    };

    CanvasKeyboardDrawer.prototype.drawKey = function(contextualDegree) {
      var x;

      x = this.keyOffset(contextualDegree) + this.keyboardOffset;
      if (contextualDegree.diatonicAccidental === ACCIDENTAL.NATURAL) {
        this.graphicsContext.fillRect(x, 0, this.WHITE_NOTE_WIDTH, this.WHITE_NOTE_HEIGHT);
        return this.graphicsContext.strokeRect(x, 0, this.WHITE_NOTE_WIDTH, this.WHITE_NOTE_HEIGHT);
      } else if (contextualDegree.diatonicAccidental === ACCIDENTAL.SHARP) {
        this.graphicsContext.fillRect(x + this.BLACK_NOTE_OFFSET_S, 0, this.BLACK_NOTE_WIDTH, this.BLACK_NOTE_HEIGHT);
        return this.graphicsContext.strokeRect(x + this.BLACK_NOTE_OFFSET_S, 0, this.BLACK_NOTE_WIDTH, this.BLACK_NOTE_HEIGHT);
      } else if (contextualDegree.diatonicAccidental === ACCIDENTAL.FLAT) {
        this.graphicsContext.fillRect(x + this.BLACK_NOTE_OFFSET_F, 0, this.BLACK_NOTE_WIDTH, this.BLACK_NOTE_HEIGHT);
        return this.graphicsContext.strokeRect(x + this.BLACK_NOTE_OFFSET_F, 0, this.BLACK_NOTE_WIDTH, this.BLACK_NOTE_HEIGHT);
      }
    };

    CanvasKeyboardDrawer.prototype.keyOffset = function(contextualDegree) {
      var octaveOffset;

      octaveOffset = contextualDegree.octave * 7 * this.WHITE_NOTE_WIDTH;
      if (contextualDegree.diatonicAccidental === ACCIDENTAL.NATURAL) {
        return octaveOffset + contextualDegree.diatonicDegree * this.WHITE_NOTE_WIDTH;
      } else if (contextualDegree.diatonicAccidental === ACCIDENTAL.SHARP) {
        return octaveOffset + contextualDegree.diatonicDegree * this.WHITE_NOTE_WIDTH;
      } else if (contextualDegree.diatonicAccidental === ACCIDENTAL.FLAT) {
        return octaveOffset + (contextualDegree.diatonicDegree - 1) * this.WHITE_NOTE_WIDTH;
      }
    };

    return CanvasKeyboardDrawer;

  })();

  Keyboard = (function() {
    function Keyboard(LOWEST_PITCH, HIGHEST_PITCH) {
      this.LOWEST_PITCH = LOWEST_PITCH;
      this.HIGHEST_PITCH = HIGHEST_PITCH;
    }

    return Keyboard;

  })();

  TuneTreeContext = (function() {
    function TuneTreeContext(manager, state, drawer) {
      this.manager = manager;
      this.state = state;
      this.drawer = drawer;
      this.redraw = __bind(this.redraw, this);
      window.addEventListener("redraw", this.redraw);
    }

    TuneTreeContext.prototype.run = function() {
      return this.manager.renderLoop();
    };

    TuneTreeContext.prototype.redraw = function() {
      var dep, _i, _ref, _results;

      this.drawer.setDrawStyle(0);
      this.drawer.draw(this.manager.graphicsContext, 0);
      this.drawer.setDrawStyle(1);
      _results = [];
      for (dep = _i = 1, _ref = this.state.depth; 1 <= _ref ? _i < _ref : _i > _ref; dep = 1 <= _ref ? ++_i : --_i) {
        _results.push(this.drawer.draw(this.manager.graphicsContext, dep));
      }
      return _results;
    };

    return TuneTreeContext;

  })();

  TuneTreeState = (function() {
    function TuneTreeState() {
      this.state = [];
      this.depth = 20;
    }

    TuneTreeState.prototype.depth = function() {
      return this.depth;
    };

    return TuneTreeState;

  })();

  CanvasManager = (function() {
    function CanvasManager(canvas) {
      this.canvas = canvas;
      this.renderLoop = __bind(this.renderLoop, this);
      this.redrawEvent = new CustomEvent("redraw");
      this.canvasSize();
      this.requestFrame = (function() {
        return window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || function() {
          return window.setTimeout(callback, 1000 / 60);
        };
      })();
    }

    CanvasManager.prototype.canvasSize = function() {
      this.canvas.width = window.innerWidth;
      this.canvas.height = window.innerHeight;
      this.graphicsContext = this.canvas.getContext("2d");
      return window.addEventListener('resize', this.canvasSize, false);
    };

    CanvasManager.prototype.render = function() {
      this.graphicsContext.save();
      this.graphicsContext.setTransform(1, 0, 0, 1, 0, 0);
      this.graphicsContext.clearRect(0, 0, this.canvas.width, this.canvas.height);
      this.graphicsContext.restore();
      return window.dispatchEvent(this.redrawEvent);
    };

    CanvasManager.prototype.renderLoop = function() {
      this.render();
      return this.requestFrame.call(window, this.renderLoop);
    };

    return CanvasManager;

  })();

  constructContext = function() {
    var KEYBOARD_HEIGHT, KEY_WIDTH, canvas, context, keyboard, keyboardDrawer, manager;

    KEYBOARD_HEIGHT = 35;
    KEY_WIDTH = 15;
    keyboard = new Keyboard(60 - (12 * 3), 60 + (12 * 3));
    canvas = document.getElementById("canvas");
    this.state = new TuneTreeState();
    keyboardDrawer = new CanvasKeyboardDrawer(keyboard, KEY_WIDTH, KEYBOARD_HEIGHT);
    manager = new CanvasManager(canvas, context);
    context = new TuneTreeContext(manager, state, keyboardDrawer);
    return context;
  };

  context = constructContext();

  context.run();

}).call(this);
